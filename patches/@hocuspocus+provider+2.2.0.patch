diff --git a/node_modules/@hocuspocus/provider/dist/hocuspocus-provider.cjs b/node_modules/@hocuspocus/provider/dist/hocuspocus-provider.cjs
index c00693b..7e7c09c 100644
--- a/node_modules/@hocuspocus/provider/dist/hocuspocus-provider.cjs
+++ b/node_modules/@hocuspocus/provider/dist/hocuspocus-provider.cjs
@@ -2256,7 +2256,6 @@ class HocuspocusProviderWebsocket extends EventEmitter {
         this.emit('disconnect', { event });
     }
     destroy() {
-        this.emit('destroy');
         if (this.intervals.forceSync) {
             clearInterval(this.intervals.forceSync);
         }
diff --git a/node_modules/@hocuspocus/provider/dist/hocuspocus-provider.esm.js b/node_modules/@hocuspocus/provider/dist/hocuspocus-provider.esm.js
index e0b6d8d..64e764d 100644
--- a/node_modules/@hocuspocus/provider/dist/hocuspocus-provider.esm.js
+++ b/node_modules/@hocuspocus/provider/dist/hocuspocus-provider.esm.js
@@ -2113,6 +2113,7 @@ class HocuspocusProviderWebsocket extends EventEmitter {
     }
     onMessage(event) {
         this.resolveConnectionAttempt();
+        this.lastMessageReceived = getUnixTime();
     }
     resolveConnectionAttempt() {
         if (this.connectionAttempt) {
@@ -2318,8 +2319,17 @@ class HocuspocusProvider extends EventEmitter {
             forceSync: null,
         };
         this.isConnected = true;
-        this.boundBeforeUnload = this.beforeUnload.bind(this);
         this.boundBroadcastChannelSubscriber = this.broadcastChannelSubscriber.bind(this);
+        this.boundBeforeUnload = this.beforeUnload.bind(this);
+        this.boundOnOpen = this.onOpen.bind(this);
+        this.boundOnMessage = this.onMessage.bind(this);
+        this.boundOnClose = this.onClose.bind(this);
+        this.boundOnStatus = this.onStatus.bind(this);
+        this.forwardConnect = (e) => this.emit('connect', e);
+        this.forwardOpen = (e) => this.emit('open', e);
+        this.forwardClose = (e) => this.emit('close', e);
+        this.forwardDisconnect = (e) => this.emit('disconnect', e);
+        this.forwardDestroy = (e) => this.emit('destroy', e);
         this.setConfiguration(configuration);
         this.configuration.document = configuration.document ? configuration.document : new Y.Doc();
         this.configuration.awareness = configuration.awareness ? configuration.awareness : new Awareness(this.document);
@@ -2334,18 +2344,18 @@ class HocuspocusProvider extends EventEmitter {
         this.on('authenticated', this.configuration.onAuthenticated);
         this.on('authenticationFailed', this.configuration.onAuthenticationFailed);
         this.configuration.websocketProvider.on('connect', this.configuration.onConnect);
-        this.configuration.websocketProvider.on('connect', (e) => this.emit('connect', e));
-        this.configuration.websocketProvider.on('open', this.onOpen.bind(this));
-        this.configuration.websocketProvider.on('open', (e) => this.emit('open', e));
-        this.configuration.websocketProvider.on('message', this.onMessage.bind(this));
-        this.configuration.websocketProvider.on('close', this.onClose.bind(this));
+        this.configuration.websocketProvider.on('connect', this.forwardConnect);
+        this.configuration.websocketProvider.on('open', this.boundOnOpen);
+        this.configuration.websocketProvider.on('open', this.forwardOpen);
+        this.configuration.websocketProvider.on('message', this.boundOnMessage);
+        this.configuration.websocketProvider.on('close', this.boundOnClose);
         this.configuration.websocketProvider.on('close', this.configuration.onClose);
-        this.configuration.websocketProvider.on('close', (e) => this.emit('close', e));
-        this.configuration.websocketProvider.on('status', this.onStatus.bind(this));
+        this.configuration.websocketProvider.on('close', this.forwardClose);
+        this.configuration.websocketProvider.on('status', this.boundOnStatus);
         this.configuration.websocketProvider.on('disconnect', this.configuration.onDisconnect);
-        this.configuration.websocketProvider.on('disconnect', (e) => this.emit('disconnect', e));
+        this.configuration.websocketProvider.on('disconnect', this.forwardDisconnect);
         this.configuration.websocketProvider.on('destroy', this.configuration.onDestroy);
-        this.configuration.websocketProvider.on('destroy', (e) => this.emit('destroy', e));
+        this.configuration.websocketProvider.on('destroy', this.forwardDestroy);
         this.awareness.on('update', () => {
             this.emit('awarenessUpdate', { states: awarenessStatesToArray(this.awareness.getStates()) });
         });
@@ -2510,6 +2520,19 @@ class HocuspocusProvider extends EventEmitter {
         this.awareness.off('update', this.awarenessUpdateHandler);
         this.document.off('update', this.documentUpdateHandler);
         this.removeAllListeners();
+        this.configuration.websocketProvider.off('connect', this.configuration.onConnect);
+        this.configuration.websocketProvider.off('connect', this.forwardConnect);
+        this.configuration.websocketProvider.off('open', this.boundOnOpen);
+        this.configuration.websocketProvider.off('open', this.forwardOpen);
+        this.configuration.websocketProvider.off('message', this.boundOnMessage);
+        this.configuration.websocketProvider.off('close', this.boundOnClose);
+        this.configuration.websocketProvider.off('close', this.configuration.onClose);
+        this.configuration.websocketProvider.off('close', this.forwardClose);
+        this.configuration.websocketProvider.off('status', this.boundOnStatus);
+        this.configuration.websocketProvider.off('disconnect', this.configuration.onDisconnect);
+        this.configuration.websocketProvider.off('disconnect', this.forwardDisconnect);
+        this.configuration.websocketProvider.off('destroy', this.configuration.onDestroy);
+        this.configuration.websocketProvider.off('destroy', this.forwardDestroy);
         this.send(CloseMessage, { documentName: this.configuration.name });
         this.isConnected = false;
         if (typeof window === 'undefined') {
