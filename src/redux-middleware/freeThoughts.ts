import _ from 'lodash'
import { ThunkMiddleware } from 'redux-thunk'
import State from '../@types/State'
import { Thunk } from '../@types/Thunk'
import freeThoughts from '../action-creators/freeThoughts'
import { FREE_THOUGHTS_THRESHOLD, FREE_THOUGHTS_THROTTLE } from '../constants'

/** Checks if the thought cache has exceeded its memory limit. If so, dispatches freeThoughts which frees memory in the thoughtIndex, lexemeIndex, and YJS providers. */
const checkThreshold: Thunk = (dispatch, getState): void => {
  const state = getState()
  if (Object.keys(state.thoughts.thoughtIndex).length > FREE_THOUGHTS_THRESHOLD) {
    // Note: YJS docs and providers are deallocated in the pushQueue enhancer based on the updates generated by the freeThoughts reducer.
    dispatch(freeThoughts())
  }
}

const checkThrottled = _.throttle(checkThreshold, FREE_THOUGHTS_THROTTLE, { leading: false })

/** Runs a throttled session keepalive on every action. */
const freeThoughtsMiddleware: ThunkMiddleware<State> = ({ dispatch, getState }) => {
  return next => action => {
    next(action)
    checkThrottled(dispatch, getState)
  }
}

export default freeThoughtsMiddleware
