diff --git a/node_modules/y-leveldb/dist/y-leveldb.cjs b/node_modules/y-leveldb/dist/y-leveldb.cjs
index 28ec0ea..473cc99 100644
--- a/node_modules/y-leveldb/dist/y-leveldb.cjs
+++ b/node_modules/y-leveldb/dist/y-leveldb.cjs
@@ -385,33 +385,54 @@ class LeveldbPersistence {
    */
   constructor (location, /* istanbul ignore next */ { level = defaultLevel__default["default"], levelOptions = {} } = {}) {
     const db = level(location, { ...levelOptions, valueEncoding, keyEncoding });
-    this.tr = promise__namespace.resolve();
+
+    // global lock
+    this.trAll = promise__namespace.resolve();
+
+    // per-doc locks
+    this.tr = new Map();
+
     /**
      * Execute an transaction on a database. This will ensure that other processes are currently not writing.
      *
      * This is a private method and might change in the future.
      *
-     * @todo only transact on the same room-name. Allow for concurrency of different rooms.
-     *
      * @template T
      *
      * @param {function(any):Promise<T>} f A transaction that receives the db object
+     * @param {string | null} docName Blocks transactions to the same docName. If null, blocks all transactions.
      * @return {Promise<T>}
      */
-    this._transact = f => {
-      const currTr = this.tr;
-      this.tr = (async () => {
+    this._transact = (docName, f) => {
+      const mutexKey = docName || '';
+      const currTrAll = this.trAll;
+      const currTr = this.tr.get(mutexKey);
+      let res = /** @type {any} */ (null);
+      let tr = promise__namespace.resolve();
+      tr = (async () => {
+        await currTrAll;
         await currTr;
-        let res = /** @type {any} */ (null);
         try {
           res = await f(db);
+
+          // remove the lock after the final transaction completes
+          const isFinal = this.tr.get(mutexKey) === tr;
+          if (isFinal) {
+            this.tr.delete(mutexKey);
+          }
         } catch (err) {
           /* istanbul ignore next */
           console.warn('Error during y-leveldb transaction', err);
         }
-        return res
       })();
-      return this.tr
+
+      if (docName === null) {
+        this.trAll = Promise.all([...this.tr.values()]).then(() => tr).then(() => res);
+      } else {
+        this.tr.set(mutexKey, tr);
+      }
+
+      return tr.then(() => res)
     };
   }
 
@@ -419,7 +440,7 @@ class LeveldbPersistence {
    * @param {string} docName
    */
   flushDocument (docName) {
-    return this._transact(async db => {
+    return this._transact(docName, async db => {
       const updates = await getLevelUpdates(db, docName);
       const { update, sv } = mergeUpdates(updates);
       await flushDocument(db, docName, update, sv);
@@ -431,7 +452,7 @@ class LeveldbPersistence {
    * @return {Promise<Y.Doc>}
    */
   getYDoc (docName) {
-    return this._transact(async db => {
+    return this._transact(docName, async db => {
       const updates = await getLevelUpdates(db, docName);
       const ydoc = new Y__namespace.Doc();
       ydoc.transact(() => {
@@ -451,7 +472,7 @@ class LeveldbPersistence {
    * @return {Promise<Uint8Array>}
    */
   getStateVector (docName) {
-    return this._transact(async db => {
+    return this._transact(docName, async db => {
       const { clock, sv } = await readStateVector(db, docName);
       let curClock = -1;
       if (sv !== null) {
@@ -475,7 +496,7 @@ class LeveldbPersistence {
    * @return {Promise<number>} Returns the clock of the stored update
    */
   storeUpdate (docName, update) {
-    return this._transact(db => storeUpdate(db, docName, update))
+    return this._transact(docName, db => storeUpdate(db, docName, update))
   }
 
   /**
@@ -492,9 +513,10 @@ class LeveldbPersistence {
    * @return {Promise<void>}
    */
   clearDocument (docName) {
-    return this._transact(async db => {
+    return this._transact(docName, async db => {
       await db.del(createDocumentStateVectorKey(docName));
       await clearRange(db, createDocumentFirstKey(docName), createDocumentLastKey(docName));
+      this.tr.delete(docName);
     })
   }
 
@@ -505,7 +527,7 @@ class LeveldbPersistence {
    * @return {Promise<void>}
    */
   setMeta (docName, metaKey, value) {
-    return this._transact(db => levelPut(db, createDocumentMetaKey(docName, metaKey), buffer__namespace.encodeAny(value)))
+    return this._transact(docName, db => levelPut(db, createDocumentMetaKey(docName, metaKey), buffer__namespace.encodeAny(value)))
   }
 
   /**
@@ -514,7 +536,7 @@ class LeveldbPersistence {
    * @return {Promise<any>}
    */
   delMeta (docName, metaKey) {
-    return this._transact(db => db.del(createDocumentMetaKey(docName, metaKey)))
+    return this._transact(docName, db => db.del(createDocumentMetaKey(docName, metaKey)))
   }
 
   /**
@@ -523,7 +545,7 @@ class LeveldbPersistence {
    * @return {Promise<any>}
    */
   getMeta (docName, metaKey) {
-    return this._transact(async db => {
+    return this._transact(docName, async db => {
       const res = await levelGet(db, createDocumentMetaKey(docName, metaKey));
       if (res === null) {
         return// return void
@@ -536,7 +558,7 @@ class LeveldbPersistence {
    * @return {Promise<Array<string>>}
    */
   getAllDocNames () {
-    return this._transact(async db => {
+    return this._transact(null, async db => {
       const docKeys = await getAllDocs(db, false, true);
       return docKeys.map(key => key[1])
     })
@@ -546,7 +568,7 @@ class LeveldbPersistence {
    * @return {Promise<Array<{ name: string, sv: Uint8Array, clock: number }>>}
    */
   getAllDocStateVectors () {
-    return this._transact(async db => {
+    return this._transact(null, async db => {
       const docs = /** @type {any} */ (await getAllDocs(db, true, true));
       return docs.map(doc => {
         const { sv, clock } = decodeLeveldbStateVector(doc.value);
@@ -560,7 +582,7 @@ class LeveldbPersistence {
    * @return {Promise<Map<string, any>>}
    */
   getMetas (docName) {
-    return this._transact(async db => {
+    return this._transact(docName, async db => {
       const data = await getLevelBulkData(db, {
         gte: createDocumentMetaKey(docName, ''),
         lt: createDocumentMetaEndKey(docName),
@@ -579,14 +601,14 @@ class LeveldbPersistence {
    * @return {Promise<void>}
    */
   destroy () {
-    return this._transact(db => db.close())
+    return this._transact(null, db => db.close())
   }
 
   /**
    * Delete all data in database.
    */
   clearAll () {
-    return this._transact(async db => db.clear())
+    return this._transact(null, async db => db.clear())
   }
 }
 
