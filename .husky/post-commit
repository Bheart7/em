#!/bin/sh
. "$(dirname "$0")/_/husky.sh"

SHORT_SHA=$(git rev-parse HEAD)
LINT_LOG="$TMPDIR"/lint."$SHORT_SHA".log

# strip color
strip() {
  sed -r "s/\x1B\[([0-9]{1,3}(;[0-9]{1,2};?)?)?[mGK]//g"
}

# display a notification
notify() {
  # if osascript is not supported, do nothing
  if [ -f /usr/bin/osascript ]; then
    # get '<SHORT_SHA> <FIRST_LINE_OF_COMMIT_MSG>'
    COMMIT_INFO=$(git log --oneline -n 1 --format="%h %s")

    # read back in the lint errors
    # TODO: update for each tye of error
    ERRORS=$(cat "$LINT_LOG" | sed 1,4d)

    # Trigger apple- or OSA-script on supported platforms
    /usr/bin/osascript -e "display notification \"$ERRORS\" with title \"ncu: $COMMIT_INFO: $*\""
  fi

  # always clean up the lint output, and do not clag-up TMPDIR
  rm "$LINT_LOG"
}

# ensure failed lint exit code passes through sed
set -o pipefail

# Do NOT run this when rebasing or we can't get the branch
branch=$(git branch --show-current)
if [ -z "$branch" ]; then
  exit 0
fi

# Lint asynchrously, not blocking the terminal and piping all output to a file.
# IFF lint fails trigger a pop-up (on supported platforms) with at least the
# first error shown.
# We pipe output so that the terminal (tmux, vim, emacs etc.) isn't borked by
# stray output.
npm run lint:src | strip &> "$LINT_LOG" || notify "Lint Error" &
